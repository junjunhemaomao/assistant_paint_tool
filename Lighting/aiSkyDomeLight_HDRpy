# -*- coding: utf-8 -*-
import os
import re
import json
import ssl
import urllib.request
import urllib.error
from maya import cmds
from PySide2 import QtCore, QtWidgets, QtGui

TOOL_TITLE = "Poly Haven HDRI aiSkyDomeLight"
CACHE_DIR = os.path.join(os.path.expanduser("~"), "Documents", "PolyHaven_HDRI")
SUPPORTED_RES = ["1k", "2k", "4k", "8k", "16k"]
SUPPORTED_FMT = ["hdr", "exr"]
DL_HOST = "https://dl.polyhaven.org"
UA = "PolyHaven-Maya-Helper/1.6"
TIMEOUT = 60

SSL_CTX = ssl.create_default_context()

def ensure_dir(path):
    os.makedirs(path, exist_ok=True)
    return path

def build_cache_path(asset, res, fmt):
    ensure_dir(CACHE_DIR)
    return os.path.join(CACHE_DIR, f"{asset}_{res}.{fmt}")

RES_SET = {"1k", "2k", "4k", "8k", "16k"}

def strip_trailing_res(slug):
    m = re.match(r'^(.+?)_([0-9]+k)$', slug)
    return m.group(1) if m and m.group(2).lower() in RES_SET else slug

def parse_polyhaven_dl_url(text):
    m = re.search(r'/HDRIs/(hdr|exr)/([0-9]+k)/([a-zA-Z0-9_\-]+)_([0-9]+k)\.(hdr|exr)$', text)
    return (strip_trailing_res(m.group(3)), m.group(2).lower(), m.group(5).lower()) if m else (None, None, None)

def parse_input(text):
    if not text: return None, None, None
    text = text.strip()
    
    if "dl.polyhaven.org/file/ph-assets/HDRIs" in text:
        a, r, f = parse_polyhaven_dl_url(text)
        if a: return a, r, f
    
    m = re.search(r'/a/([a-zA-Z0-9_\-]+)', text)
    if m: return m.group(1), None, None
    
    if re.match(r'^[a-zA-Z0-9_\-]+$', text): return strip_trailing_res(text), None, None
    m2 = re.search(r'/([a-zA-Z0-9_\-]+)(?:\.[a-zA-Z0-9]+)?$', text)
    return (strip_trailing_res(m2.group(1)), None, None) if m2 else (None, None, None)

class HttpClient:
    def __init__(self):
        pass

    def opener(self):
        handlers = [urllib.request.HTTPSHandler(context=SSL_CTX)]
        return urllib.request.build_opener(*handlers)

    def open(self, url, method="GET", timeout=TIMEOUT, headers=None):
        req = urllib.request.Request(url, method=method, headers={"User-Agent": UA, **(headers or {})})
        return self.opener().open(req, timeout=timeout)

    def try_head_or_range(self, url, timeout=15):
        try:
            with self.open(url, method="HEAD", timeout=timeout) as resp:
                return 200 <= getattr(resp, "status", 200) < 400
        except Exception:
            try:
                with self.open(url, timeout=timeout, headers={"Range": "bytes=0-64"}) as resp:
                    code = getattr(resp, "status", 200)
                    return (200 <= code < 400) or code == 206
            except Exception:
                return False

    def download(self, url, save_path, progress_cb=None):
        tmp_path = save_path + ".part"
        try:
            with self.open(url) as resp:
                total = int(resp.headers.get("Content-Length", 0))
                with open(tmp_path, "wb") as f:
                    read = 0
                    while True:
                        data = resp.read(262144)
                        if not data: break
                        f.write(data)
                        read += len(data)
                        if progress_cb and total: progress_cb(read, total)
            os.replace(tmp_path, save_path)
            return save_path
        finally:
            if os.path.exists(tmp_path): os.remove(tmp_path)

def get_asset_category(client, asset):
    try:
        with client.open(f"https://api.polyhaven.com/id/{asset}", timeout=8) as resp:
            return json.load(resp).get("category", "").lower() or None
    except Exception:
        return None

def query_hdri_files(client, asset):
    try:
        with client.open(f"https://api.polyhaven.com/files/hdris/{asset}", timeout=12) as resp:
            data = json.load(resp)
            return {
                fmt: {res: DL_HOST + rel for res, rel in res_map.items() if rel}
                for fmt, res_map in data.items() if fmt in ("hdr", "exr")
            }
    except Exception:
        return {}

def build_direct_url(asset, res, fmt):
    return f"{DL_HOST}/file/ph-assets/HDRIs/{fmt}/{res}/{asset}_{res}.{fmt}"

def try_download(client, asset, pref_res, pref_fmt, progress_cb=None):
    files = query_hdri_files(client, asset)
    res_order = [pref_res] + [r for r in ["16k", "8k", "4k", "2k", "1k"] if r != pref_res]
    fmt_order = [pref_fmt] + [f for f in ("hdr", "exr") if f != pref_fmt]
    tried = []

    for fmt in fmt_order:
        for res in res_order:
            url = files.get(fmt, {}).get(res) if files else build_direct_url(asset, res, fmt)
            if not url: continue
            tried.append(url)
            save_path = build_cache_path(asset, res, fmt)
            if os.path.exists(save_path) and os.path.getsize(save_path) > 0:
                return save_path, res, fmt, tried
            if not files and not client.try_head_or_range(url): continue
            try:
                client.download(url, save_path, progress_cb)
                return save_path, res, fmt, tried
            except Exception:
                continue
    return None, None, None, tried

def get_or_create_skydome():
    existing = next((s for s in cmds.ls(type="aiSkyDomeLight") or [] if cmds.listRelatives(s, parent=True)), None)
    if existing: return cmds.listRelatives(existing, parent=True)[0], existing
    
    shape = cmds.shadingNode("aiSkyDomeLight", asLight=True, name="HDR_SkyDomeShape")
    transform = cmds.listRelatives(shape, parent=True)[0]
    cmds.rename(transform, "HDR_SkyDome")
    cmds.setAttr(f"{shape}.camera", 1)
    return transform, shape

def connect_file_to_skydome(image_path):
    t, s = get_or_create_skydome()
    file_node = cmds.ls("HDRI_file", type="file")[0] if cmds.ls("HDRI_file", type="file") else cmds.shadingNode("file", asTexture=True, name="HDRI_file")
    cmds.setAttr(f"{file_node}.fileTextureName", image_path.replace("\\", "/"), type="string")
    cmds.connectAttr(f"{file_node}.outColor", f"{s}.color", force=True)
    return t, s, file_node

def set_skydome_attr(attr, value):
    try:
        _, s = get_or_create_skydome()
        cmds.setAttr(f"{s}.{attr}", float(value))
    except Exception:
        pass

def set_skydome_rotation(value):
    try:
        t, _ = get_or_create_skydome()
        cmds.setAttr(f"{t}.rotateY", float(value))
    except Exception:
        pass

def set_skydome_camera(enabled):
    try:
        _, s = get_or_create_skydome()
        cmds.setAttr(f"{s}.camera", 1 if enabled else 0)
    except Exception:
        pass

class HDRITool(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setup_ui()
        self.sync_scene_values()

    def setup_ui(self):
        self.setWindowTitle(TOOL_TITLE)
        self.setMinimumWidth(700)
        self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)
        ensure_dir(CACHE_DIR)

        open_btn = QtWidgets.QPushButton("打开 Poly Haven HDRIs")
        open_btn.clicked.connect(lambda: QtGui.QDesktopServices.openUrl(QtCore.QUrl("https://polyhaven.com/hdris")))
        
        self.asset_edit = QtWidgets.QLineEdit("https://polyhaven.com/a/zawiszy_czarnego")
        self.res_combo = QtWidgets.QComboBox()
        self.res_combo.addItems(SUPPORTED_RES)
        self.res_combo.setCurrentText("4k")
        self.fmt_combo = QtWidgets.QComboBox()
        self.fmt_combo.addItems(SUPPORTED_FMT)
        self.fmt_combo.setCurrentText("exr")
        
        self.cache_label = QtWidgets.QLabel(CACHE_DIR)
        cache_btn = QtWidgets.QPushButton("更改缓存位置")
        cache_btn.clicked.connect(self.choose_cache_dir)
        
        self.download_btn = QtWidgets.QPushButton("下载并应用")
        self.download_btn.clicked.connect(self.on_download_apply)
        
        self.progress = QtWidgets.QProgressBar()
        self.progress.setRange(0, 100)
        
        SLIDER_WIDTH = 400
        
        self.exposure_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal)
        self.exposure_slider.setRange(-40, 80)
        self.exposure_slider.setFixedWidth(SLIDER_WIDTH)
        self.exposure_slider.valueChanged.connect(self.on_exposure_changed)
        self.exposure_label = QtWidgets.QLabel("0.0")
        
        self.intensity_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal)
        self.intensity_slider.setRange(0, 1000)
        self.intensity_slider.setFixedWidth(SLIDER_WIDTH)
        self.intensity_slider.valueChanged.connect(self.on_intensity_changed)
        self.intensity_label = QtWidgets.QLabel("1.0")
        
        self.rotate_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal)
        self.rotate_slider.setRange(0, 360)
        self.rotate_slider.setFixedWidth(SLIDER_WIDTH)
        self.rotate_slider.valueChanged.connect(self.on_rotate_changed)
        self.rotate_label = QtWidgets.QLabel("0°")
        
        self.camera_cb = QtWidgets.QCheckBox("相机可见 (camera)")
        self.camera_cb.setChecked(True)
        self.camera_cb.toggled.connect(set_skydome_camera)

        layout = QtWidgets.QVBoxLayout(self)
        layout.addWidget(open_btn)
        
        grp_res = QtWidgets.QGroupBox("资源")
        res_layout = QtWidgets.QFormLayout(grp_res)
        res_layout.addRow("资产/URL：", self.asset_edit)
        hbox = QtWidgets.QHBoxLayout()
        hbox.addWidget(QtWidgets.QLabel("分辨率："))
        hbox.addWidget(self.res_combo)
        hbox.addWidget(QtWidgets.QLabel("格式："))
        hbox.addWidget(self.fmt_combo)
        res_layout.addRow(hbox)
        
        grp_net = QtWidgets.QGroupBox("网络与缓存")
        net_layout = QtWidgets.QVBoxLayout(grp_net)
        hbox = QtWidgets.QHBoxLayout()
        hbox.addWidget(self.cache_label, 1)
        hbox.addWidget(cache_btn)
        net_layout.addLayout(hbox)
        net_layout.addWidget(self.download_btn)
        net_layout.addWidget(self.progress)
        
        grp_render = QtWidgets.QGroupBox("Arnold 天光控制")
        render_layout = QtWidgets.QFormLayout(grp_render)
        
        exposure_layout = QtWidgets.QHBoxLayout()
        exposure_layout.addWidget(QtWidgets.QLabel("曝光 (aiExposure):"))
        exposure_layout.addWidget(self.exposure_slider)
        exposure_layout.addWidget(self.exposure_label)
        render_layout.addRow(exposure_layout)
        
        intensity_layout = QtWidgets.QHBoxLayout()
        intensity_layout.addWidget(QtWidgets.QLabel("强度 (intensity):"))
        intensity_layout.addWidget(self.intensity_slider)
        intensity_layout.addWidget(self.intensity_label)
        render_layout.addRow(intensity_layout)
        
        rotate_layout = QtWidgets.QHBoxLayout()
        rotate_layout.addWidget(QtWidgets.QLabel("旋转 Y:"))
        rotate_layout.addWidget(self.rotate_slider)
        rotate_layout.addWidget(self.rotate_label)
        render_layout.addRow(rotate_layout)
        
        render_layout.addRow(self.camera_cb)
        
        layout.addWidget(grp_res)
        layout.addWidget(grp_net)
        layout.addWidget(grp_render)

    def sync_scene_values(self):
        try:
            t, s = get_or_create_skydome()
            
            exposure = cmds.getAttr(f"{s}.aiExposure")
            self.exposure_slider.setValue(int(exposure * 4))
            self.exposure_label.setText(f"{exposure:.2f}")
            
            intensity = cmds.getAttr(f"{s}.intensity")
            self.intensity_slider.setValue(int(intensity * 10))
            self.intensity_label.setText(f"{intensity:.2f}")
            
            rotation = cmds.getAttr(f"{t}.rotateY")
            self.rotate_slider.setValue(int(rotation))
            self.rotate_label.setText(f"{int(rotation)}°")
            
            self.camera_cb.setChecked(bool(cmds.getAttr(f"{s}.camera")))
        except Exception:
            pass

    def choose_cache_dir(self):
        global CACHE_DIR
        d = QtWidgets.QFileDialog.getExistingDirectory(self, "选择缓存位置", CACHE_DIR)
        if d:
            CACHE_DIR = d
            ensure_dir(CACHE_DIR)
            self.cache_label.setText(CACHE_DIR)

    def on_download_apply(self):
        text = self.asset_edit.text().strip()
        asset, url_res, url_fmt = parse_input(text)
        if not asset:
            QtWidgets.QMessageBox.warning(self, TOOL_TITLE, "无法解析输入")
            return

        pref_res = url_res or self.res_combo.currentText()
        pref_fmt = url_fmt or self.fmt_combo.currentText()
        client = HttpClient()
        
        cat = get_asset_category(client, asset)
        if cat and cat != "hdris" and QtWidgets.QMessageBox.question(
            self, TOOL_TITLE, f"该资产分类为：{cat}\n仍按 HDRI 尝试下载吗？"
        ) != QtWidgets.QMessageBox.Yes:
            return

        self.progress.setValue(0)
        QtWidgets.QApplication.setOverrideCursor(QtCore.Qt.WaitCursor)
        try:
            save_path, res, fmt, tried = try_download(
                client, asset, pref_res, pref_fmt, self.set_progress
            )
            if save_path:
                connect_file_to_skydome(save_path)
                self.progress.setValue(100)
                QtWidgets.QMessageBox.information(self, TOOL_TITLE, f"下载并应用成功！\n{res} {fmt}")
            else:
                QtWidgets.QMessageBox.warning(self, TOOL_TITLE, "下载失败\n尝试URL:\n" + "\n".join(tried))
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, TOOL_TITLE, f"错误：{e}")
        finally:
            QtWidgets.QApplication.restoreOverrideCursor()

    def set_progress(self, read, total):
        self.progress.setValue(int(read * 100 / max(total, 1)))
        
    def on_exposure_changed(self, value):
        exposure = value / 4.0
        self.exposure_label.setText(f"{exposure:.2f}")
        set_skydome_attr("aiExposure", exposure)
        
    def on_intensity_changed(self, value):
        intensity = value / 10.0
        self.intensity_label.setText(f"{intensity:.2f}")
        set_skydome_attr("intensity", intensity)
        
    def on_rotate_changed(self, value):
        self.rotate_label.setText(f"{value}°")
        set_skydome_rotation(value)

def show_hdri_tool():
    global _dlg_instance
    try: _dlg_instance.close()
    except: pass
    _dlg_instance = HDRITool()
    _dlg_instance.show()

show_hdri_tool()